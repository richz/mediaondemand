#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MediaOnDemand
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="aspnetdb")]
	public partial class StorageMediaDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertStoredMedia(StoredMedia instance);
    partial void UpdateStoredMedia(StoredMedia instance);
    partial void DeleteStoredMedia(StoredMedia instance);
    #endregion
		
		public StorageMediaDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["aspnetdbConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public StorageMediaDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StorageMediaDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StorageMediaDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StorageMediaDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<StoredMedia> StoredMedias
		{
			get
			{
				return this.GetTable<StoredMedia>();
			}
		}
	}
	
	[Table(Name="dbo.StoredMedia")]
	public partial class StoredMedia : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _medTitle;
		
		private string _medLocation;
		
		private System.DateTime _medDateAdded;
		
		private System.Nullable<char> _medIsViewable;
		
		private string _medArtist;
		
		private string _medDescription;
		
		private int _medId;
		
		private string _medGenre;
		
		private string _medMediaType;
		
		private System.Nullable<float> _medDuration;
		
		private string _medAlbum;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmedTitleChanging(string value);
    partial void OnmedTitleChanged();
    partial void OnmedLocationChanging(string value);
    partial void OnmedLocationChanged();
    partial void OnmedDateAddedChanging(System.DateTime value);
    partial void OnmedDateAddedChanged();
    partial void OnmedIsViewableChanging(System.Nullable<char> value);
    partial void OnmedIsViewableChanged();
    partial void OnmedArtistChanging(string value);
    partial void OnmedArtistChanged();
    partial void OnmedDescriptionChanging(string value);
    partial void OnmedDescriptionChanged();
    partial void OnmedIdChanging(int value);
    partial void OnmedIdChanged();
    partial void OnmedGenreChanging(string value);
    partial void OnmedGenreChanged();
    partial void OnmedMediaTypeChanging(string value);
    partial void OnmedMediaTypeChanged();
    partial void OnmedDurationChanging(System.Nullable<float> value);
    partial void OnmedDurationChanged();
    partial void OnmedAlbumChanging(string value);
    partial void OnmedAlbumChanged();
    #endregion
		
		public StoredMedia()
		{
			OnCreated();
		}
		
		[Column(Storage="_medTitle", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string medTitle
		{
			get
			{
				return this._medTitle;
			}
			set
			{
				if ((this._medTitle != value))
				{
					this.OnmedTitleChanging(value);
					this.SendPropertyChanging();
					this._medTitle = value;
					this.SendPropertyChanged("medTitle");
					this.OnmedTitleChanged();
				}
			}
		}
		
		[Column(Storage="_medLocation", DbType="VarChar(150)")]
		public string medLocation
		{
			get
			{
				return this._medLocation;
			}
			set
			{
				if ((this._medLocation != value))
				{
					this.OnmedLocationChanging(value);
					this.SendPropertyChanging();
					this._medLocation = value;
					this.SendPropertyChanged("medLocation");
					this.OnmedLocationChanged();
				}
			}
		}
		
		[Column(Storage="_medDateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime medDateAdded
		{
			get
			{
				return this._medDateAdded;
			}
			set
			{
				if ((this._medDateAdded != value))
				{
					this.OnmedDateAddedChanging(value);
					this.SendPropertyChanging();
					this._medDateAdded = value;
					this.SendPropertyChanged("medDateAdded");
					this.OnmedDateAddedChanged();
				}
			}
		}
		
		[Column(Storage="_medIsViewable", DbType="Char(1)")]
		public System.Nullable<char> medIsViewable
		{
			get
			{
				return this._medIsViewable;
			}
			set
			{
				if ((this._medIsViewable != value))
				{
					this.OnmedIsViewableChanging(value);
					this.SendPropertyChanging();
					this._medIsViewable = value;
					this.SendPropertyChanged("medIsViewable");
					this.OnmedIsViewableChanged();
				}
			}
		}
		
		[Column(Storage="_medArtist", DbType="VarChar(50)")]
		public string medArtist
		{
			get
			{
				return this._medArtist;
			}
			set
			{
				if ((this._medArtist != value))
				{
					this.OnmedArtistChanging(value);
					this.SendPropertyChanging();
					this._medArtist = value;
					this.SendPropertyChanged("medArtist");
					this.OnmedArtistChanged();
				}
			}
		}
		
		[Column(Storage="_medDescription", DbType="VarChar(100)")]
		public string medDescription
		{
			get
			{
				return this._medDescription;
			}
			set
			{
				if ((this._medDescription != value))
				{
					this.OnmedDescriptionChanging(value);
					this.SendPropertyChanging();
					this._medDescription = value;
					this.SendPropertyChanged("medDescription");
					this.OnmedDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_medId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int medId
		{
			get
			{
				return this._medId;
			}
			set
			{
				if ((this._medId != value))
				{
					this.OnmedIdChanging(value);
					this.SendPropertyChanging();
					this._medId = value;
					this.SendPropertyChanged("medId");
					this.OnmedIdChanged();
				}
			}
		}
		
		[Column(Storage="_medGenre", DbType="VarChar(50)")]
		public string medGenre
		{
			get
			{
				return this._medGenre;
			}
			set
			{
				if ((this._medGenre != value))
				{
					this.OnmedGenreChanging(value);
					this.SendPropertyChanging();
					this._medGenre = value;
					this.SendPropertyChanged("medGenre");
					this.OnmedGenreChanged();
				}
			}
		}
		
		[Column(Storage="_medMediaType", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string medMediaType
		{
			get
			{
				return this._medMediaType;
			}
			set
			{
				if ((this._medMediaType != value))
				{
					this.OnmedMediaTypeChanging(value);
					this.SendPropertyChanging();
					this._medMediaType = value;
					this.SendPropertyChanged("medMediaType");
					this.OnmedMediaTypeChanged();
				}
			}
		}
		
		[Column(Storage="_medDuration", DbType="Real")]
		public System.Nullable<float> medDuration
		{
			get
			{
				return this._medDuration;
			}
			set
			{
				if ((this._medDuration != value))
				{
					this.OnmedDurationChanging(value);
					this.SendPropertyChanging();
					this._medDuration = value;
					this.SendPropertyChanged("medDuration");
					this.OnmedDurationChanged();
				}
			}
		}
		
		[Column(Storage="_medAlbum", DbType="VarChar(50)")]
		public string medAlbum
		{
			get
			{
				return this._medAlbum;
			}
			set
			{
				if ((this._medAlbum != value))
				{
					this.OnmedAlbumChanging(value);
					this.SendPropertyChanging();
					this._medAlbum = value;
					this.SendPropertyChanged("medAlbum");
					this.OnmedAlbumChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
